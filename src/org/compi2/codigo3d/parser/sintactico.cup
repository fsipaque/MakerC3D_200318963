package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal String IGUAL, DIFERENTE, MAYOR_QUE, MENOR_QUE, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, cond;
nonterminal String oprel;

precedence left OR;
precedence left AND;
precedence right NOT;

precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 


start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} cond:c 
                    {: 
                        RESULT = c;
                        ControlC3D.agregarC3D( "//Valores verdaderos: "  + c.getTrueValues() + ";\n");
                        ControlC3D.agregarC3D( "//Valores falsos: "  + c.getFalseValues() + ";\n");
                        
                    :};

cond ::= cond:izq AND {: ControlC3D.agregarC3D(izq.getTrueValues() + ":\n"); :} cond:der
                    {:                        
                        RESULT = new NodoC3D("", der.getTrueValues(), izq.getFalseValues() + ", " + der.getFalseValues()); 
                    :}        
        | cond:izq OR {: ControlC3D.agregarC3D(izq.getFalseValues() + ":\n"); :}  cond:der
                    {:
                        RESULT = new NodoC3D("", izq.getTrueValues() + ", " + der.getTrueValues(), der.getFalseValues()); 
                    :}
        |NOT cond:izq
                    {:
                        RESULT = new NodoC3D("", izq.getFalseValues(), izq.getTrueValues()); 
                    :}
        | expresion:izq oprel:op expresion:der
                    {:
                        String etqV = ControlC3D.generaEtiqueta();
                        String etqF = ControlC3D.generaEtiqueta();                        
                        String c3d = " if " + izq.getCad() + " " + op + " " + der.getCad() + " then goto "+ etqV + ";\n goto " + etqF + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("", etqV, etqF); 
                    :}    
        |  PAR_IZQ cond:c PAR_DER   
           {: RESULT = c; :}  
        ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;

oprel ::= IGUAL:op      {: RESULT = op; :}
        | DIFERENTE:op  {: RESULT = op; :}
        | MAYOR_QUE:op  {: RESULT = op; :}
        | MENOR_QUE:op  {: RESULT = op; :}
        | MAYOR_IGUAL_QUE:op    {: RESULT = op; :}
        | MENOR_IGUAL_QUE:op    {: RESULT = op; :}
        ;